version: '3.9'

services:
  db:
    build: db/.
    restart: always
    container_name: paperless-db
    hostname: db
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 60
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=paperlessdb
    networks:
      - paperless

  rest:
    build: rest
    container_name: paperless-rest
    hostname: rest
    restart: unless-stopped
    ports:
      - "8081:8081"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 20s
    depends_on:
      db:
        condition: service_healthy
      queue:
        condition: service_healthy
    networks:
      - paperless
    environment:
      - DB_HOST=db
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - SPRING_RABBITMQ_HOST=queue
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=test
      - SPRING_RABBITMQ_PASSWORD=test
      - ELASTICSEARCH_HOSTS=elasticsearch
      - ELASTICSEARCH_PORT=9200

  ui:
    build: ui
    container_name: paperless-ui
    hostname: ui
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      rest:
        condition: service_healthy
    networks:
      - paperless

  queue:
    image: rabbitmq:3-management
    restart: unless-stopped
    container_name: queue
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 23s
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-storage:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: test
      RABBITMQ_DEFAULT_PASS: test
    networks:
      - paperless

  minio:
    container_name: paperless-minio
    image: minio/minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin-password
    command: server /data --console-address ":9090"
    ports:
      - "9000:9000"
      - "9090:9090"
    networks:
      - paperless

  workers:
    build: workers
    restart: unless-stopped
    depends_on:
      rest:
        condition: service_healthy
    environment:
      - MINIO_URL= http://minio:9000/
      - SPRING_RABBITMQ_HOST= queue
      - SPRING_RABBITMQ_PORT= 5672
      - SPRING_RABBITMQ_USERNAME= test
      - SPRING_RABBITMQ_PASSWORD= test
      - DATASOURCE_URL= jdbc:postgresql://db:5432/paperlessdb
      - TESSERACT_DATA=/app/tessdata
      - FILESTORAGE_PATH= /storage
      - ELASTICSEARCH_HOSTS=elasticsearch
      - ELASTICSEARCH_PORT=9200
    ports:
      - "8082:8082"
    networks:
      - paperless

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    volumes:
      - elasticsearch-data:/data
    networks:
      - paperless

  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.0
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://localhost:9200
    networks:
      - paperless

volumes:
  minio-storage: { }
  rabbitmq-storage: {}
  elasticsearch-data:

networks:
  paperless:
    driver: bridge
